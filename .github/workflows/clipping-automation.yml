name: Clipping FACIAP Automation

on:
  schedule:
    # Segunda a Sexta √†s 12h (15h UTC) e 20h (23h UTC) - Hor√°rio de Bras√≠lia
    - cron: '0 15,23 * * 1-5'  # 12h e 20h no hor√°rio de Bras√≠lia, apenas dias √∫teis
  workflow_dispatch:  # Permite execu√ß√£o manual
    inputs:
      max_pages:
        description: 'M√°ximo de p√°ginas por fonte'
        required: false
        default: '3'
        type: string
      max_extraction:
        description: 'M√°ximo de extra√ß√µes por execu√ß√£o'
        required: false
        default: '50'
        type: string
      max_scoring:
        description: 'M√°ximo de scoring por execu√ß√£o'
        required: false
        default: '100'
        type: string
      force_execution:
        description: 'For√ßar execu√ß√£o mesmo fora do hor√°rio'
        required: false
        default: false
        type: boolean

env:
  TZ: America/Sao_Paulo

jobs:
  clipping-automation:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create directories
      run: |
        mkdir -p data logs
        
    - name: Restore database cache
      uses: actions/cache/restore@v4
      with:
        path: data/clipping_faciap.db
        key: clipping-db-${{ github.sha }}
        restore-keys: |
          clipping-db-
          
    - name: Execute clipping pipeline
      env:
        MAX_PAGES_PER_SOURCE: ${{ github.event.inputs.max_pages || '3' }}
        MAX_EXTRACTION_PER_RUN: ${{ github.event.inputs.max_extraction || '50' }}
        MAX_SCORING_PER_RUN: ${{ github.event.inputs.max_scoring || '100' }}
        FORCE_EXECUTION: ${{ github.event.inputs.force_execution || 'false' }}
        LOG_LEVEL: INFO
        PYTHONPATH: ${{ github.workspace }}
      run: |
        python -c "
        import sys
        import os
        from pathlib import Path
        
        # Adiciona o diret√≥rio scr ao path
        sys.path.insert(0, str(Path.cwd() / 'scr'))
        
        from pipeline import ClippingPipeline
        from datetime import datetime
        import pytz
        
        # Configura√ß√£o de timezone
        tz_brasil = pytz.timezone('America/Sao_Paulo')
        agora = datetime.now(tz_brasil)
        
        # Verifica se deve executar
        force_execution = os.getenv('FORCE_EXECUTION', 'false').lower() == 'true'
        is_weekday = agora.weekday() < 5  # 0=Monday, 6=Sunday
        
        if not force_execution and not is_weekday:
            print(f'‚è≠Ô∏è Pulando execu√ß√£o - {agora.strftime(\"%A\")} n√£o √© dia √∫til')
            sys.exit(0)
        
        print('üöÄ INICIANDO PIPELINE AUTOMATIZADO')
        print('=' * 50)
        print(f'üìÖ Data/Hora: {agora.strftime(\"%A, %d/%m/%Y √†s %H:%M\")}')
        print(f'üåç Timezone: {agora.tzname()}')
        print(f'üìä Par√¢metros:')
        print(f'   ‚Ä¢ Max p√°ginas por fonte: {os.getenv(\"MAX_PAGES_PER_SOURCE\", \"3\")}')
        print(f'   ‚Ä¢ Max extra√ß√µes: {os.getenv(\"MAX_EXTRACTION_PER_RUN\", \"50\")}')
        print(f'   ‚Ä¢ Max scoring: {os.getenv(\"MAX_SCORING_PER_RUN\", \"100\")}')
        print()
        
        try:
            pipeline = ClippingPipeline()
            resultado = pipeline.executar_completo(
                max_pages_por_fonte=int(os.getenv('MAX_PAGES_PER_SOURCE', '3')),
                limite_extracao=int(os.getenv('MAX_EXTRACTION_PER_RUN', '50')),
                limite_scoring=int(os.getenv('MAX_SCORING_PER_RUN', '100'))
            )
            
            if resultado['sucesso']:
                print()
                print('‚úÖ PIPELINE CONCLU√çDO COM SUCESSO')
                print(f'‚è±Ô∏è Tempo total: {resultado[\"tempo_execucao\"]:.1f}s')
                print(f'üìä Resultados:')
                print(f'   üì∞ Not√≠cias coletadas: {resultado[\"coleta\"][\"total_coletadas\"]}')
                print(f'   üÜï Not√≠cias novas: {resultado[\"coleta\"][\"total_novas\"]}')
                print(f'   üìÑ Extra√ß√µes processadas: {resultado[\"extracao\"][\"processadas\"]}')
                print(f'   üéØ Scoring processado: {resultado[\"scoring\"][\"processadas\"]}')
                
                # Define sa√≠da para pr√≥ximos steps
                print(f'::set-output name=success::true')
                print(f'::set-output name=new_news::{resultado[\"coleta\"][\"total_novas\"]}')
                print(f'::set-output name=execution_time::{resultado[\"tempo_execucao\"]:.1f}')
                
            else:
                print('‚ùå PIPELINE FALHOU')
                print(f'‚ö†Ô∏è Erro: {resultado.get(\"erro\", \"Erro desconhecido\")}')
                sys.exit(1)
                
        except Exception as e:
            print(f'üí• ERRO CR√çTICO: {str(e)}')
            import traceback
            traceback.print_exc()
            sys.exit(1)
        "
        
    - name: Save database cache
      if: always()
      uses: actions/cache/save@v4
      with:
        path: data/clipping_faciap.db
        key: clipping-db-${{ github.sha }}
        
    - name: Upload database artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: clipping-database-${{ github.run_number }}
        path: data/clipping_faciap.db
        retention-days: 30
        
    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: automation-logs-${{ github.run_number }}
        path: logs/
        retention-days: 7
        
    - name: Create execution summary
      if: always()
      run: |
        echo "## üìä Resumo da Execu√ß√£o" >> $GITHUB_STEP_SUMMARY
        echo "- **Data/Hora:** $(date '+%d/%m/%Y %H:%M %Z')" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Dura√ß√£o:** ${{ steps.execute.outputs.execution_time || 'N/A' }}s" >> $GITHUB_STEP_SUMMARY
        echo "- **Not√≠cias novas:** ${{ steps.execute.outputs.new_news || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "data/clipping_faciap.db" ]; then
          db_size=$(du -h data/clipping_faciap.db | cut -f1)
          echo "- **Tamanho do banco:** $db_size" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Links √öteis" >> $GITHUB_STEP_SUMMARY
        echo "- [Dashboard Streamlit](https://clipping-legislativo-faciap.streamlit.app)" >> $GITHUB_STEP_SUMMARY
        echo "- [Reposit√≥rio](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
